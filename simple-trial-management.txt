// ====================================================
// TeamBase シンプルトライアル管理システム
// ====================================================

// 設定値
const ADMIN_EMAIL = 'info.osaka@addness.co.jp';
const COMPANY_NAME = 'SL.AI Team Base';

// ====================================================
// メイン関数: 毎日トライアル状況をチェック
// ====================================================
function checkTrialStatus() {
  try {
    Logger.log('=== トライアル状況チェック開始 ===');
    
    const sheet = SpreadsheetApp.getActiveSheet();
    const data = sheet.getDataRange().getValues();
    const today = new Date();
    let processedCount = 0;
    
    // ヘッダー行をスキップして2行目から処理
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      // 必要データの存在確認
      if (!row[0] || !row[2] || !row[8]) continue; // タイムスタンプ、メール、会社名
      
      const timestamp = new Date(row[0]); // A列: タイムスタンプ
      const email = row[2];               // C列: メールアドレス
      const name = row[1];                // B列: 担当者名
      const companyName = row[8];         // I列: 会社名
      const status = row[9] || 'trial';   // J列: ステータス
      
      // トライアル中のもののみ処理
      if (status !== 'trial' && status !== 'pending_approval' && status !== '') {
        continue;
      }
      
      // 経過日数を計算
      const diffTime = today - timestamp;
      const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
      
      Logger.log(`行${i+1}: ${companyName} - 経過日数: ${diffDays}日`);
      
      // 12日目（トライアル終了3日前）の通知
      if (diffDays === 12) {
        Logger.log(`12日目通知対象: ${companyName} (${email})`);
        
        const success = sendTrialReminderEmail(email, name, companyName);
        
        if (success) {
          // ステータスを更新
          sheet.getRange(i + 1, 10).setValue('reminder_sent');
          processedCount++;
        }
      }
    }
    
    Logger.log(`=== 処理完了: ${processedCount}件の通知を送信 ===`);
    
  } catch (error) {
    Logger.log('エラーが発生しました: ' + error.toString());
    
    // 管理者にエラー通知
    MailApp.sendEmail({
      to: ADMIN_EMAIL,
      subject: '【ERROR】TeamBase トライアル管理システム エラー',
      body: `トライアル管理システムでエラーが発生しました。\n\nエラー内容:\n${error.toString()}\n\n時刻: ${new Date()}`
    });
  }
}

// ====================================================
// 12日目トライアル終了通知メール送信
// ====================================================
function sendTrialReminderEmail(email, name, companyName) {
  try {
    const subject = '【重要】TeamBase 無料トライアル期間終了のお知らせ';
    
    // 解約フォームURL（実際のドメインに変更してください）
    const cancelUrl = 'https://your-domain.com/cancel-form.html';
    
    const htmlBody = `
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TeamBase - 有料プラン移行のお知らせ</title>
    <style>
        body {
            font-family: 'Hiragino Sans', 'Hiragino Kaku Gothic ProN', 'Noto Sans JP', sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
        }
        .container {
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
            border-bottom: 2px solid #e74c3c;
            padding-bottom: 20px;
        }
        .logo {
            font-size: 28px;
            font-weight: bold;
            color: #e74c3c;
            margin-bottom: 10px;
        }
        .warning-box {
            background-color: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
            border-left: 4px solid #f39c12;
        }
        .info-box {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
        }
        .button {
            display: inline-block;
            background-color: #6c757d;
            color: white;
            padding: 12px 30px;
            text-decoration: none;
            border-radius: 5px;
            font-weight: bold;
            margin: 10px 5px;
            border: none;
            cursor: pointer;
            text-align: center;
        }
        .button:hover {
            background-color: #5a6268;
        }
        .footer {
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #dee2e6;
            text-align: center;
            color: #6c757d;
            font-size: 14px;
        }
        .contact-info {
            margin-top: 20px;
            font-size: 14px;
            color: #6c757d;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">TeamBase</div>
            <h2>14日間無料トライアル期間終了のお知らせ</h2>
        </div>

        <p><strong>${name}</strong> 様</p>
        <p>いつもTeamBaseをご利用いただき、ありがとうございます。</p>

        <div class="warning-box">
            <h3>⚠️ 重要なお知らせ</h3>
            <p>お客様のTeamBase無料トライアル期間が間もなく終了いたします。</p>
            <p><strong>3日後に自動的に有料プラン（¥10,000/ユーザー/月）への移行が開始されます。</strong></p>
        </div>

        <div class="info-box">
            <h3>📋 今後の流れ</h3>
            <ul>
                <li><strong>継続をご希望の場合：</strong> 特別なお手続きは不要です。自動的に有料プランに移行され、請求が開始されます。</li>
                <li><strong>解約をご希望の場合：</strong> 下記の解約申し込みフォームにご入力ください。</li>
            </ul>
        </div>

        <div style="text-align: center; margin: 30px 0;">
            <a href="${cancelUrl}" class="button">解約申し込みフォーム</a>
        </div>

        <div class="info-box">
            <h3>💰 有料プラン詳細</h3>
            <p><strong>料金：</strong> ¥10,000/ユーザー/月（税込）</p>
            <p><strong>請求開始：</strong> トライアル期間終了翌日から</p>
            <p><strong>支払い方法：</strong> 登録済みのお支払い方法にて自動請求</p>
        </div>

        <div class="contact-info">
            <h3>お問い合わせ</h3>
            <p>ご不明な点がございましたら、お気軽にお問い合わせください。</p>
            <p>📧 info.osaka@addness.co.jp</p>
            <p>📞 06-4400-0754（平日 9:00-18:00）</p>
        </div>

        <div class="footer">
            <p>このメールは自動送信されています。返信は不要です。</p>
            <p>© 2024 TeamBase. All rights reserved.</p>
        </div>
    </div>
</body>
</html>
`;
    
    MailApp.sendEmail({
      to: email,
      subject: subject,
      htmlBody: htmlBody,
      name: COMPANY_NAME
    });
    
    Logger.log(`12日目通知メール送信完了: ${email}`);
    
    // 管理者にも通知
    MailApp.sendEmail({
      to: ADMIN_EMAIL,
      subject: '【TeamBase】12日目通知メール送信完了',
      body: `以下の契約者に12日目通知メールを送信しました。\n\n会社名: ${companyName}\n担当者: ${name}\nメール: ${email}\n\n※解約希望の場合は解約フォームから申し込みが入ります。`
    });
    
    return true;
    
  } catch (error) {
    Logger.log(`12日目通知メール送信失敗: ${error.toString()}`);
    return false;
  }
}

// ====================================================
// 解約処理機能
// ====================================================
function processCancellation(email, reason) {
  try {
    const sheet = SpreadsheetApp.getActiveSheet();
    const data = sheet.getDataRange().getValues();
    
    // 該当する申し込みを検索
    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      
      if (row[2] === email) { // C列: メールアドレスで検索
        // ステータスを「解約済み」に更新
        sheet.getRange(i + 1, 10).setValue('cancelled');
        sheet.getRange(i + 1, 11).setValue(reason); // K列: 解約理由
        sheet.getRange(i + 1, 12).setValue(new Date()); // L列: 解約日時
        
        // 管理者に解約通知
        MailApp.sendEmail({
          to: ADMIN_EMAIL,
          subject: '【TeamBase】トライアル期間中解約申し込み',
          body: `トライアル期間中の解約申し込みがありました。\n\n会社名: ${row[8]}\n担当者: ${row[1]}\nメール: ${email}\n解約理由: ${reason}\n\nスプレッドシートのステータスを「cancelled」に更新しました。`
        });
        
        Logger.log(`解約処理完了: ${email}`);
        return true;
      }
    }
    
    Logger.log(`該当する申し込みが見つかりません: ${email}`);
    return false;
    
  } catch (error) {
    Logger.log(`解約処理エラー: ${error.toString()}`);
    return false;
  }
}

// ====================================================
// トリガー設定
// ====================================================
function setupDailyTrigger() {
  // 既存トリガーを削除
  const triggers = ScriptApp.getProjectTriggers();
  triggers.forEach(trigger => {
    if (trigger.getHandlerFunction() === 'checkTrialStatus') {
      ScriptApp.deleteTrigger(trigger);
    }
  });
  
  // 毎日午前9時に実行するトリガーを作成
  ScriptApp.newTrigger('checkTrialStatus')
    .timeBased()
    .everyDays(1)
    .atHour(9)
    .create();
    
  Logger.log('日次トリガーを設定しました（毎日午前9時実行）');
}

// ====================================================
// テスト用関数
// ====================================================
function testTrialReminder() {
  const result = sendTrialReminderEmail('test@example.com', 'テスト 太郎', 'テスト株式会社');
  Logger.log(`テスト結果: ${result ? '成功' : '失敗'}`);
}

// ====================================================
// 手動実行用
// ====================================================
function manualCheck() {
  Logger.log('=== 手動実行開始 ===');
  checkTrialStatus();
} 